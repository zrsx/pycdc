trigger:
  branches:
    include:
      - master
      - expr
      - __main__

stages:
- stage: build
  jobs:

  # Ubuntu x64
  - job: Ubuntu_x64
    strategy:
      matrix:
        Debug:
          buildType: Debug
        Release:
          buildType: Release
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - script: |
        sudo apt-get update
        sudo apt-get install -y ccache
        export PATH="/usr/lib/ccache:$PATH"
      displayName: 'Install ccache'

    - script: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=$(buildType) \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        make -j$(nproc)
      displayName: 'Build Ubuntu x64 $(buildType)'

    - script: |
        cd build
        python3 ../tests/run_tests.py
      displayName: 'Test Ubuntu x64 $(buildType)'
      continueOnError: true

    - task: PublishBuildArtifacts@1
      condition: eq(variables['buildType'], 'Release')
      inputs:
        PathtoPublish: 'build'
        ArtifactName: 'Ubuntu_x64_Release'
        publishLocation: 'Container'

  # Ubuntu ARM64 (cross-compile)
  - job: Ubuntu_ARM64
    strategy:
      matrix:
        Debug:
          buildType: Debug
        Release:
          buildType: Release
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self

    - script: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu ccache
        export PATH="/usr/lib/ccache:$PATH"
      displayName: 'Install ARM toolchain + ccache'

    - script: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=$(buildType) \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        make -j$(nproc)
      displayName: 'Cross-compile Ubuntu ARM64 $(buildType)'

    - script: echo "Skipping test for ARM64 (not executable on x64 agent)"
      displayName: 'Skip ARM64 Test'

    - task: PublishBuildArtifacts@1
      condition: eq(variables['buildType'], 'Release')
      inputs:
        PathtoPublish: 'build'
        ArtifactName: 'Ubuntu_ARM64_Release'
        publishLocation: 'Container'

  # Windows x64
  - job: Windows_x64
    strategy:
      matrix:
        Debug:
          buildType: Debug
        Release:
          buildType: Release
    pool:
      vmImage: 'windows-2025'
    steps:
    - checkout: self

    - script: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=$(buildType) ..
        cmake --build . --config $(buildType)
      displayName: 'Build Windows x64 $(buildType)'

    - task: PublishBuildArtifacts@1
      condition: eq(variables['buildType'], 'Release')
      inputs:
        PathtoPublish: 'build'
        ArtifactName: 'Windows_x64_Release'
        publishLocation: 'Container'

  # Windows x86
  - job: Windows_x86
    strategy:
      matrix:
        Debug:
          buildType: Debug
        Release:
          buildType: Release
    pool:
      vmImage: windows-11
    steps:
    - checkout: self

    - script: |
        mkdir build
        cd build
        cmake -A Win32 -DCMAKE_BUILD_TYPE=$(buildType) ..
        cmake --build . --config $(buildType)
      displayName: 'Build Windows x86 $(buildType)'

    - task: PublishBuildArtifacts@1
      condition: eq(variables['buildType'], 'Release')
      inputs:
        PathtoPublish: 'build'
        ArtifactName: 'Windows_x86_Release'
        publishLocation: 'Container'

  # macOS x64
  - job: MacOS_x64
    strategy:
      matrix:
        Debug:
          buildType: Debug
        Release:
          buildType: Release
    pool:
      vmImage: macos-latest
    steps:
    - checkout: self

    - script: |
        brew install ccache
        export PATH="/opt/homebrew/opt/ccache/libexec:$PATH"
      displayName: 'Install ccache for macOS'

    - script: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=$(buildType) \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..
        make -j$(sysctl -n hw.ncpu)
      displayName: 'Build macOS x64 $(buildType)'

    - script: |
        cd build
        python3 ../tests/run_tests.py
      displayName: 'Test macOS x64 $(buildType)'
      continueOnError: true

    - task: PublishBuildArtifacts@1
      condition: eq(variables['buildType'], 'Release')
      inputs:
        PathtoPublish: 'build'
        ArtifactName: 'MacOS_x64_Release'
        publishLocation: 'Container'
